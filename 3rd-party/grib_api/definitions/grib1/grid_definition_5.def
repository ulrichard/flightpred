# Copyright 2005-2007 ECMWF
#
# Licensed under the GNU Lesser General Public License which
# incorporates the terms and conditions of version 3 of the GNU
# General Public License.
# See LICENSE and gpl-3.0.txt for details.

# GRID DEFINITION polar stereographic
# grib 1 -> 2
constant gridDefinitionTemplateNumber     = 20;

unsigned[2] Ni  : dump;
alias Nx =  Ni;
alias numberOfPointsAlongXAxis =  Ni;

unsigned[2] Nj  : dump;
alias Ny =  Nj;
alias numberOfPointsAlongYAxis =  Nj;

signed[3] latitudeOfFirstGridPoint : edition_specific ;
meta geography.latitudeOfFirstGridPointInDegrees scale(latitudeOfFirstGridPoint,oneConstant,grib1divider,truncateDegrees) : dump;
alias La1 = latitudeOfFirstGridPoint;

signed[3] longitudeOfFirstGridPoint : edition_specific;
meta geography.longitudeOfFirstGridPointInDegrees scale(longitudeOfFirstGridPoint,oneConstant,grib1divider,truncateDegrees) : dump;
alias Lo1 = longitudeOfFirstGridPoint;

include "resolution_flags.def";

#  LoV - orientation of the grid; i.e.  the longitude value of the meridian which is parallel to the Y-axis
signed[3] orientationOfTheGrid  ;
meta geography.orientationOfTheGridInDegrees scale(orientationOfTheGrid,oneConstant,grib1divider,truncateDegrees) : dump;
alias LoV = orientationOfTheGrid ;

#  Dx - X-direction grid length
unsigned[3] xDirectionGridLengthInMetres  : dump;
alias Dx = xDirectionGridLengthInMetres;
alias Di = xDirectionGridLengthInMetres;

#  Dy - Y-direction grid length
unsigned[3] yDirectionGridLengthInMetres  : dump;
alias Dy = yDirectionGridLengthInMetres;
alias Dj = yDirectionGridLengthInMetres;

transient latitudeWhereDxAndDyAreSpecifiedInDegrees=60;

#assert(latitudeWhereDxAndDyAreSpecifiedInDegrees == 60);

#  Projection center flag
unsigned[1] projectionCenterFlag : dump ;

# for change_scanning_direction
alias yFirst=latitudeOfFirstGridPointInDegrees;
alias xFirst=longitudeOfFirstGridPointInDegrees;

include "scanning_mode.def";

pad padding_grid5_1(4);

meta numberOfDataPoints number_of_points(Nx,Ny,PLPresent,pl) : dump;
alias numberOfPoints=numberOfDataPoints;
meta numberOfValues number_of_values(values,bitsPerValue,numberOfDataPoints,bitmapPresent,bitmap,numberOfCodedValues) : dump;
alias ls.valuesCount=numberOfValues;

